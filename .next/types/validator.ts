// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\admin\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ..\..\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\app\guide\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\guide\\page.js")
  handler satisfies AppPageConfig<"/guide">
}

// Validate ..\..\app\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\login\\page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\register\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\register\\page.js")
  handler satisfies AppPageConfig<"/register">
}

// Validate ..\..\app\steps\[stepId]\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\steps\\[stepId]\\page.js")
  handler satisfies AppPageConfig<"/steps/[stepId]">
}

// Validate ..\..\app\api\auth\login\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\login\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/login">
}

// Validate ..\..\app\api\auth\logout\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\logout\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ..\..\app\api\auth\register\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\register\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ..\..\app\api\heartbeat\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\heartbeat\\route.js")
  handler satisfies RouteHandlerConfig<"/api/heartbeat">
}

// Validate ..\..\app\api\session\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\session\\route.js")
  handler satisfies RouteHandlerConfig<"/api/session">
}

// Validate ..\..\app\api\steps\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\steps\\route.js")
  handler satisfies RouteHandlerConfig<"/api/steps">
}

// Validate ..\..\app\api\user\me\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\user\\me\\route.js")
  handler satisfies RouteHandlerConfig<"/api/user/me">
}

// Validate ..\..\app\api\users\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\users\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[id]">
}

// Validate ..\..\app\api\users\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\users\\route.js")
  handler satisfies RouteHandlerConfig<"/api/users">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
